<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux提权</title>
    <url>/Linux%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<h1 id="Part1-sudo介绍"><a href="#Part1-sudo介绍" class="headerlink" title="Part1 sudo介绍"></a>Part1 sudo介绍</h1><h2 id="什么是sudo"><a href="#什么是sudo" class="headerlink" title="什么是sudo"></a>什么是sudo</h2><p>简单的说，sudo 是一种&#x3D;&#x3D;权限管理机制&#x3D;&#x3D;，管理员可以授权于一些普通用户去执行一些 root 执行的操作，提示输入密码时该密码为当前用户的密码，而不需要知道 root 的密码。不过有时间限制，Ubuntu默认为一次时长15分钟</p>
<span id="more"></span>

<p>严谨些说，sudo 允许一个已授权用户以超级用户或者其它用户的角色运行一个命令。当然，能做什么不能做什么都是通过安全策略来指定的。sudo 支持插件架构的安全策略，并能把输入输出写入日志。第三方可以开发并发布自己的安全策略和输入输出日志插件，并让它们无缝的和 sudo 一起工作。默认的安全策略记录在 &#x3D;&#x3D;&#x2F;etc&#x2F;sudoers&#x3D;&#x3D; 文件中。而安全策略可能需要用户通过密码来验证他们自己。也就是在用户执行 sudo 命令时要求用户输入&#x3D;&#x3D;自己账号的密码。&#x3D;&#x3D;如果验证失败，sudo 命令将会退出。</p>
<p>默认的etc&#x2F;sudoers配置文件：</p>
<p><img src="/%5CLinux%E6%8F%90%E6%9D%83%5C1.png" alt="图片"></p>
<br/>

<h1 id="Part2-CVE-2021-3156漏洞"><a href="#Part2-CVE-2021-3156漏洞" class="headerlink" title="Part2 CVE-2021-3156漏洞"></a>Part2 CVE-2021-3156漏洞</h1><h2 id="1-漏洞简介"><a href="#1-漏洞简介" class="headerlink" title="1. 漏洞简介"></a>1. 漏洞简介</h2><p>2021年1月26日，Linux安全工具&#x3D;&#x3D;sudo&#x3D;&#x3D;被发现严重的基于&#x3D;&#x3D;堆缓冲区溢出&#x3D;&#x3D;漏洞。利用这一漏洞，攻击者无需知道用户密码，一样可以获得root权限，并且是在默认配置下。此漏洞已分配为CVE-2021-3156，危险等级评分为7分。</p>
<h2 id="2-原理介绍"><a href="#2-原理介绍" class="headerlink" title="2. 原理介绍"></a>2. 原理介绍</h2><p>漏洞发生的原因在于sudo错误地转义了参数中的反斜杠。</p>
<p>sudo命令允许用户以超级用户或&#x2F;etc&#x2F;sudoers文件中指定的其他用户的身份运行指定命令cmd。设置真实和有效用户ID与用户组ID，以匹配&#x2F;etc&#x2F;passwd文件中指定的目标用户和&#x2F;etc&#x2F;group文件中指定的用户组（除非指定了“-P”选项）。如果调用者是超级用户，或目标用户与调用者是同一用户，则无须提供密码。否则，sudo通常要求用户提供密码进行认证。注意，按照默认的配置，这里所谓的密码认证指的是用户的密码，不是超级用户的密码。</p>
<p>一旦获得认证，立即更新&#x2F;var&#x2F;run&#x2F;sudo目录中的用户时间记录。在之后的短时间内（5分钟，除非sudoers文件中另有设定），用户可以随时运行sudo命令而不必提供密码。</p>
<p>sudo与sudoedit是一个程序两个名字。运行sudoedit命令，相当于运行“sudo -e”命令。sudoedit命令主要用于编辑&#x2F;etc&#x2F;sudoers文件，参见“-e”选项的说明。</p>
<p>当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或-i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。因此只要存在sudoers文件（通常是&#x2F;etc&#x2F;sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。</p>
<h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3. 影响版本"></a>3. 影响版本</h2><p>受影响版本<br>Sudo 1.8.2 – 1.8.31p2<br>Sudo 1.9.0 – 1.9.5p1</p>
<p>不受影响版本<br>sudo &#x3D;&gt;1.9.5p2</p>
<h2 id="4-漏洞复现"><a href="#4-漏洞复现" class="headerlink" title="4. 漏洞复现"></a>4. 漏洞复现</h2><br/>

<h1 id="Part3-CVE-2023-22809漏洞"><a href="#Part3-CVE-2023-22809漏洞" class="headerlink" title="Part3 CVE-2023-22809漏洞"></a>Part3 CVE-2023-22809漏洞</h1><h2 id="1-漏洞简介-1"><a href="#1-漏洞简介-1" class="headerlink" title="1. 漏洞简介"></a>1. 漏洞简介</h2><p>在Sudo 版本 1.9.12p1中使用sudoedit时，sudoers的保护机制可能被绕过，从而导致通过编辑未经授权的文件实现权限升级，Sudo中的sudoedit对处理用户提供的环境变量（如SUDO_EDITOR、VISUAL和EDITOR）中传递的额外参数存在缺陷。当用户指定的编辑器包含绕过sudoers策略的“–”参数时，拥有sudoedit访问权限的本地攻击者可通过将任意条目附加到要处理的文件列表中，最终在目标系统上实现权限提升（由普通用户到超级用户，即”root”）</p>
<h2 id="2-原理介绍-1"><a href="#2-原理介绍-1" class="headerlink" title="2. 原理介绍"></a>2. 原理介绍</h2><br/>

<h2 id="3-影响版本-1"><a href="#3-影响版本-1" class="headerlink" title="3. 影响版本"></a>3. 影响版本</h2><p>sudo 1.8.0-sudo 1.9.12p1</p>
<h2 id="4-漏洞复现-1"><a href="#4-漏洞复现-1" class="headerlink" title="4. 漏洞复现"></a>4. 漏洞复现</h2><ol>
<li>查看当前sudo版本</li>
</ol>
<p><img src="/%5CLinux%E6%8F%90%E6%9D%83%5C2.png"></p>
<p>如上，为受影响版本，若不是，则在<a href="https://">https://www.sudo.ws/dist/</a>下载相应版本后解压、配置、编译并安装</p>
<br/>

<p><img src="/%5CLinux%E6%8F%90%E6%9D%83%5C3.png" alt="图片"></p>
<p><img src="/%5CLinux%E6%8F%90%E6%9D%83%5C4.png" alt="图片"></p>
<br/>

<h2 id="5-缓解措施"><a href="#5-缓解措施" class="headerlink" title="5. 缓解措施"></a>5. 缓解措施</h2><p>1、为防止 sudoedit 使用用户指定的编辑器，可向 sudoers 文件中添加以下内容： Defaults!sudoedit env_delete+&#x3D;”SUDO_EDITOR VISUAL EDITOR”<br>2、使用“Cmnd_Alias”限制编辑器编辑指定文件时，如： Cmnd_Alias EDIT_MOTD &#x3D; sudoedit &#x2F;etc&#x2F;motd Defaults!EDIT_MOTD env_delete+&#x3D;”SUDO_EDITOR VISUAL EDITOR” user ALL &#x3D; EDIT_MOTD</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><p><a href="https://">https://www.cnblogs.com/20181309lzy/p/14710439.html</a></p>
</li>
<li><p><a href="https://">https://wker.com/linux-command/sudo-sudoedit.html</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>01-docker-初识</title>
    <url>/01-docker-%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>docker容器</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基础语法</title>
    <url>/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>Markdown用法并不唯一，笔者所列仅为个人习惯</p>
</blockquote>
<span id="more"></span>

<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="# 一级标题"></a># 一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="## 二级标题"></a>## 二级标题</h2><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="###### 六级标题"></a>###### 六级标题</h6><p>可选用法</p>
<h1 id="一级标题（下加若干-）"><a href="#一级标题（下加若干-）" class="headerlink" title="一级标题（下加若干&#x3D;）"></a>一级标题（下加若干&#x3D;）</h1><h2 id="二级标题（下加若干-）"><a href="#二级标题（下加若干-）" class="headerlink" title="二级标题（下加若干-）"></a>二级标题（下加若干-）</h2><p>*** 分割线</p>
<hr>
<p>换行<br>等于加空格</p>
<p>分段</p>
<p>要空一行</p>
<hr>
<p> <strong>加粗</strong> ** **，快捷键ctrl+B</p>
<p><em>斜体</em> * *，快捷键ctrl+I</p>
<p><em><strong>又粗又斜</strong></em> *** ***</p>
<hr>
<blockquote>
<p>引用 &gt;</p>
<blockquote>
<p>嵌套引用&gt;&gt;</p>
</blockquote>
<h2 id="可以嵌套标题"><a href="#可以嵌套标题" class="headerlink" title="可以嵌套标题"></a>可以嵌套标题</h2><p><strong>粗体</strong></p>
<p><em>斜体</em></p>
<hr>
<p>分割线</p>
<p>并不是所有元素都能嵌套（反例呢，快来救一下（急））</p>
</blockquote>
<hr>
<ul>
<li>无序列表 -<ul>
<li>tab键缩进以嵌套<ul>
<li>多层嵌套</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>有序列表 1.<ol>
<li>这个好像不好用<ol>
<li>序号不能变</li>
</ol>
</li>
</ol>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C语言代码块</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">好酷!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>ctrl+&#x2F; 注释</p>
<!-- 这是注释,看不到哎,好酷
这里写"More"会在网页中隐藏后面内容,跳转到详情页才能看 -->

<p>超链接用法:<br>[超链接显示名] (超链接地址 “超链接title”)<br><a href="%E8%B6%85%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" title="超链接title">超链接显示名</a></p>
<p><a href="mailto:&#x31;&#x32;&#51;&#64;&#113;&#113;&#46;&#99;&#x6f;&#109;">&#x31;&#x32;&#51;&#64;&#113;&#113;&#46;&#99;&#x6f;&#109;</a> &lt;邮箱&gt;</p>
<p><a href="https://123.com/">https://123.com</a> &lt;网址&gt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  A(把大象放进去) --&gt; B&#123;&quot;冰箱小不小？&quot;&#125;</span><br><span class="line">  B --&gt; |不小| C[把冰箱门关上]</span><br><span class="line">  B --&gt;   |小| D[换个大点的冰箱]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>备忘</tag>
      </tags>
  </entry>
  <entry>
    <title>start</title>
    <url>/start/</url>
    <content><![CDATA[<h2 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h2><h3 id="不知道写什么"><a href="#不知道写什么" class="headerlink" title="不知道写什么"></a>不知道写什么</h3>]]></content>
  </entry>
  <entry>
    <title>《战争史》初读</title>
    <url>/%E3%80%8A%E6%88%98%E4%BA%89%E5%8F%B2%E3%80%8B%E5%88%9D%E8%AF%BB/</url>
    <content><![CDATA[<hr>
<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><h3 id="书名：战争史"><a href="#书名：战争史" class="headerlink" title="书名：战争史"></a>书名：战争史</h3><h3 id="作者：John-Keegan（英）"><a href="#作者：John-Keegan（英）" class="headerlink" title="作者：John Keegan（英）"></a>作者：John Keegan（英）</h3><h3 id="译者：林华"><a href="#译者：林华" class="headerlink" title="译者：林华"></a>译者：林华</h3><hr>
<span id="more"></span>

<p>以下为初读摘抄</p>
<h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p>&emsp; 战争无疑与经济、外交和政治相关。但相关并不等于不同，甚至不等于相似。战争与外交和政治完全不同，因为真正打仗的人在价值观和技能方面与外交家和政治家迥然相异。军人的价值观和技能属于另一个世界，那是一个非常古老的世界，与日常的世界并存但不相属。随着时间的流逝，两个世界都在变化，武士世界按照平民世界的变化调整自己。然而，它总是和平民世界保持一定的距离</p>
]]></content>
      <categories>
        <category>战争史</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>对抗机器学习(AML)</title>
    <url>/%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-AML/</url>
    <content><![CDATA[<p><strong>机器学习自身安全吗？</strong></p>
<hr>
<blockquote>
<p>本文为WHU_NCC内容安全课堂笔记（记了学完就忘，不记根本不学😭）内容碎片化且片面，仅供娱乐，别学习了</p>
<p>第七讲——对抗机器学习（这是第一篇，前面的大概率不会补了）</p>
</blockquote>
<span id="more"></span>
<hr>
<h2 id="引入：ML-AML"><a href="#引入：ML-AML" class="headerlink" title="引入：ML &amp; AML"></a>引入：ML &amp; AML</h2><p>什么是机器学习，放张图不细讲惹（因为自己也不会）</p>
<img src="/%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-AML/1_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.png" class="" title="机器学习">

<p>那什么是对抗机器学习呢？</p>
<img src="/%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-AML/2_%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.png" class="" title="对抗机器学习">
<p>如上图，输入的图片是经过处理后的攻击图片，人眼很难分辨出与原图的差距，模型却把它们识别成了完全不同的东西（分别是鹈鹕、快艇和牛仔裤），听起来并没有多可怕，但试想一下，哪天你坐车里吃着火锅唱着歌，你的车载AI把前面的STOP路牌看成了限速120，想想都刺激（bushi）</p>
<p>总之，这是一个亟需重视的领域，如果说在GPT等大模型出来之前，AML只是垃圾邮件对抗之类的小打小闹，那现在随着人工智能的井喷式发展，它可能就是悬在人类头上的“达摩克里斯之剑”了（突然严肃）</p>
<hr>
<h2 id="AML基本介绍"><a href="#AML基本介绍" class="headerlink" title="AML基本介绍"></a>AML基本介绍</h2><p>全称: Adversarial Machine Learning</p>
<p>是机器学习和计算机安全的一个交叉领域，分为攻（欺骗检测器）防（确保准确）</p>
<h3 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h3><p>先放图：</p>
<img src="/%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-AML/3_%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%97%B6%E9%97%B4%E7%BA%BF.png" class="" title="对抗机器学习时间线">
<p>开创于2004年. Dalvi等针对垃圾邮件过滤问题提出对抗分类 (Adversarial classification)概念，其核心思想是分析机器学习算法在遭受特定攻击时的安全性。（比我想得要早）</p>
<p>以下为一个简单演示：</p>
<img src="/%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-AML/4_%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB.png" class="" title="垃圾邮件分类">
<img src="/%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-AML/5_%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E6%94%BB%E5%87%BB.png" class="" title="垃圾邮件攻击">
<img src="/%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-AML/6_%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E9%98%B2%E5%BE%A1.png" class="" title="垃圾邮件防御">
<ul>
<li>2005 年, Lowd 等提出对抗学习 (Adversarial learning) 概念</li>
<li>2006年，Barreno 等提出机器学习系统的攻击分类和敌手建模 (Adversary Model）</li>
<li>2010 年，Dasgupta 等将对抗机器学习形式化为学习器 (Learner) 与敌手 (Adversary) 围绕不同目标进行的博弈。其中, 学习器的目标是<strong>对数据进行正确预测或分类</strong>, 敌手的目标则是<strong>诱使学习器对相关的数据做出错误的预测</strong></li>
</ul>
<hr>
<h3 id="AML敌手模型"><a href="#AML敌手模型" class="headerlink" title="AML敌手模型"></a>AML敌手模型</h3><p>听不懂思密达，觉得很高级就copy了下来</p>
<h4 id="敌手目标-Adversary-goal"><a href="#敌手目标-Adversary-goal" class="headerlink" title="敌手目标 (Adversary goal)"></a>敌手目标 (Adversary goal)</h4><ul>
<li>完整性违规 (Integrity violation)<ul>
<li>不影响合法用户对系统功能正常使用的同时, 达到规避检测的目的</li>
</ul>
</li>
<li>可用性违规 (Availability violation) <ul>
<li>危害合法用户对系统功能正常使用, 甚至造成系统对用户的拒绝服务</li>
</ul>
</li>
</ul>
<h4 id="敌手知识-Adversary-knowledge"><a href="#敌手知识-Adversary-knowledge" class="headerlink" title="敌手知识 (Adversary knowledge)"></a>敌手知识 (Adversary knowledge)</h4><p>攻击者掌握的机器学习模型的相关知识，可包括:</p>
<ol>
<li>训练数据 D；</li>
<li>特征集X⊆Rd; </li>
<li>模型结构和参数 f : X→ R</li>
</ol>
<ul>
<li>白盒攻击：假设攻击者可以完全获取目标模型的结构和参数等信息 </li>
<li>黑盒攻击：假设攻击者只能获取模型的最终决策结果</li>
</ul>
<h4 id="敌手能力-Adversary-capability"><a href="#敌手能力-Adversary-capability" class="headerlink" title="敌手能力 (Adversary capability)"></a>敌手能力 (Adversary capability)</h4><p>指攻击者对机器学习模型的操作权限</p>
<ul>
<li>训练阶段：投毒攻击, 后门攻击</li>
<li>测试阶段：规避攻击, 隐私窃取</li>
</ul>
<p>敌手能力可以形式化为优化问题中的约束条件 </p>
<hr>
<h2 id="对抗攻击技术"><a href="#对抗攻击技术" class="headerlink" title="对抗攻击技术"></a>对抗攻击技术</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>大概分为两类</p>
<img src="/%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-AML/7_%E5%AF%B9%E6%8A%97%E6%94%BB%E5%87%BB%E5%88%86%E7%B1%BB.png" class="" title="对抗攻击分类">
<p>数据投毒(Data poisoning )：归因性攻击（Causative attack）</p>
<ul>
<li>训练阶段</li>
<li>攻击者通过干扰训练数据集来欺骗模型<ul>
<li>训练集中加入恶意样本</li>
<li>修改训练集的数据实例</li>
<li>改变训练数据标签</li>
</ul>
</li>
<li>攻击者试图干扰和破坏ML模型和算法）</li>
</ul>
<p>规避攻击(Evasion attack)：试探性攻击 (Exploratory attack)</p>
<ul>
<li>测试阶段</li>
<li>攻击者无需修改ML模型，仅让模型出错，产生攻击者需要的输出</li>
<li><strong>Evasion attack</strong> 是最常用的攻击手段</li>
</ul>
<p>其他分类：黑盒&#x2F;白盒攻击、有目标&#x2F;无目标攻击，此处不细讲</p>
<h3 id="规避攻击"><a href="#规避攻击" class="headerlink" title="规避攻击"></a>规避攻击</h3><p>照例，先放张图</p>
<img src="/%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-AML/8_%E5%AF%B9%E6%8A%97%E6%94%BB%E5%87%BB1.png" class="" title="规避攻击">

<h4 id="1-基于模仿"><a href="#1-基于模仿" class="headerlink" title="1. 基于模仿"></a>1. 基于模仿</h4><p>采用启发式算法, 直接修改文件结构或内容 </p>
<p>向恶意样本添加良性样本的特征, 或向良性样本中添加恶意样本的特征, 使得修改后的样本在实现恶意功能的同时, 将结构差异降至最低, 从而规避分类器的检测，如<strong>垃圾邮件规避攻击</strong>（好词插入，坏词混淆）</p>
<img src="/%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-AML/9_%E5%9F%BA%E4%BA%8E%E6%A8%A1%E4%BB%BF%E7%9A%84%E8%A7%84%E9%81%BF%E6%94%BB%E5%87%BB.png" class="" title="基于模仿的规避攻击">

<h4 id="2-基于梯度"><a href="#2-基于梯度" class="headerlink" title="2. 基于梯度"></a>2. 基于梯度</h4><p>利用梯度下降求解优化问题, 对输入样本执行细粒度的修改, 以最小化 (最大化) 样本被归类为恶意 (良性) 的概率 </p>
<p>应用梯度下降函数, 在损失函数最可能增加的方向上扰动测试样本, 使恶意样本向着合法样本的区域移动, 从而被分类器错分为正常样本。</p>
<ul>
<li>L-BFGS：限制内存方法 (Limited-memory broyden fletcher goldfarb shanno)</li>
<li>FGSM：快速梯度符号法 (Fast gradient sign method) </li>
<li>JSMA：基于雅可比矩阵的显著图攻击算法 (Jacobian-base saliency map attack) </li>
<li>C&amp;W 算法</li>
</ul>
<h4 id="3-基于迁移"><a href="#3-基于迁移" class="headerlink" title="3. 基于迁移"></a>3. 基于迁移</h4><p>利用了对抗样本的跨模型迁移性。可应用于无法获取模型梯度的各种攻击场景 </p>
<p>基于对抗样本的跨模型迁移性。攻击者通过构建代理模型 (Surrogate model) 的方式, 利用已知机器学习模型构造对抗样本, 然后攻击相关的未知模型</p>
<p>生成对抗网络 GAN（Generative adversarial networks ）<br>采用博弈论中的纳什均衡思想, 通过多回合的对抗训练, 使得生成器学到目标样本分布, 从而用于规避攻击</p>
<img src="/%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-AML/10_GAN.png" class="" title="GAN">

<hr>
<h3 id="投毒攻击"><a href="#投毒攻击" class="headerlink" title="投毒攻击"></a>投毒攻击</h3><p>对训练数据进行修改或者添加少量数据进行污染, 寻求全局或局部分布的扰动, 进而破坏模型可用性和完整性, 降低机器学习系统性能。</p>
<p>投毒攻击是对主流机器学习算法的一种重要威胁, 包括<strong>支持向量机、贝叶斯分类器、层次聚类以及 逻辑回归</strong>等常规算法都受到了投毒攻击的危害 </p>
<p>针对数据库发起投毒攻击, 可以实现 “立竿见影”的效果, 同时得到极为丰厚的回报, 使得投毒攻击发生更为频繁。</p>
<p>卡巴斯基实验室被指控向 VirusTotal 注入假阳性样本（将良性的、系统关键文件标记为恶意文件），当对手在新样本上训练病毒扫描器时, 这些扫描器会将合法的系统文件标记为恶意, 从而毒害竞争对手的杀毒产品</p>
<ul>
<li>可用性攻击：降低分类器分类精度并产生高误报率, 从而无法为正常用户提供服务, 甚至使系统拒绝服务</li>
<li>完整性攻击：使机器学习产生较高漏报率, 降低成功检测到恶意活动的几率</li>
</ul>
<img src="/%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-AML/11_%E6%B2%B9%E8%9B%99%E6%94%BB%E5%87%BB.png" class="" title="油蛙攻击">

<h2 id="常用规避攻击技术"><a href="#常用规避攻击技术" class="headerlink" title="常用规避攻击技术"></a>常用规避攻击技术</h2><h3 id="1-噪声攻击（Noise-attack）"><a href="#1-噪声攻击（Noise-attack）" class="headerlink" title="1.噪声攻击（Noise attack）"></a>1.噪声攻击（Noise attack）</h3><p>最简单的对抗攻击技术</p>
<p>Noise is a random arrangement of pixels containing no information（不包含任何信息的随机像素排列）</p>
<p>通过随机函数生成，是一种无目标的黑盒逃逸攻击</p>
<img src="/%E5%AF%B9%E6%8A%97%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-AML/12-%E5%99%AA%E5%A3%B0%E6%94%BB%E5%87%BB.png" class="" title="噪声攻击">

<h3 id="2-语义攻击（Semantic-attack）"><a href="#2-语义攻击（Semantic-attack）" class="headerlink" title="2.语义攻击（Semantic attack）"></a>2.语义攻击（Semantic attack）</h3><h3 id="3-快速梯度符号攻击（FGSM，Fast-gradient-sign-method-attack）"><a href="#3-快速梯度符号攻击（FGSM，Fast-gradient-sign-method-attack）" class="headerlink" title="3.快速梯度符号攻击（FGSM，Fast gradient sign method attack）"></a>3.快速梯度符号攻击（FGSM，Fast gradient sign method attack）</h3><h3 id="4-基础迭代攻击（BIM，Basic-iterative-method-attack）"><a href="#4-基础迭代攻击（BIM，Basic-iterative-method-attack）" class="headerlink" title="4.基础迭代攻击（BIM，Basic iterative method attack）"></a>4.基础迭代攻击（BIM，Basic iterative method attack）</h3><h3 id="5-投影梯度下降攻击（PGD，Projected-gradient-descent-attack）"><a href="#5-投影梯度下降攻击（PGD，Projected-gradient-descent-attack）" class="headerlink" title="5.投影梯度下降攻击（PGD，Projected gradient descent attack）"></a>5.投影梯度下降攻击（PGD，Projected gradient descent attack）</h3><h3 id="6-深度欺骗攻击（DeepFool-attack-）"><a href="#6-深度欺骗攻击（DeepFool-attack-）" class="headerlink" title="6.深度欺骗攻击（DeepFool attack ）"></a>6.深度欺骗攻击（DeepFool attack ）</h3><h3 id="7-C-W攻击（CW-Carlini-Wagner-attack-）"><a href="#7-C-W攻击（CW-Carlini-Wagner-attack-）" class="headerlink" title="7.C&amp;W攻击（CW, Carlini-Wagner attack ）"></a>7.C&amp;W攻击（CW, Carlini-Wagner attack ）</h3><h2 id="对抗防御技术"><a href="#对抗防御技术" class="headerlink" title="对抗防御技术"></a>对抗防御技术</h2><h2 id="语音对抗攻击及防御技术"><a href="#语音对抗攻击及防御技术" class="headerlink" title="语音对抗攻击及防御技术"></a>语音对抗攻击及防御技术</h2><h3 id="语音对抗样本技术"><a href="#语音对抗样本技术" class="headerlink" title="语音对抗样本技术"></a>语音对抗样本技术</h3><h3 id="语音对抗防御技术"><a href="#语音对抗防御技术" class="headerlink" title="语音对抗防御技术"></a>语音对抗防御技术</h3>]]></content>
      <categories>
        <category>内容安全</category>
      </categories>
  </entry>
  <entry>
    <title>网络木马</title>
    <url>/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/</url>
    <content><![CDATA[<blockquote>
<p>WHU_NCC计算机病毒慕课第九章网络木马知识整理，转载自他人，仅作学习</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>版权声明：本文为博主<a href="https://blog.csdn.net/daibaohui?type=blog">daibaohui</a>原创文章，遵循 CC 4.0 BY-SA 版权协议，此处为转载，因为和慕课视频讲的一毛一样，就直接用现成的了，仅作知识归档</p>
<p>本文链接：<a href="https://blog.csdn.net/daibaohui/article/details/113889229">https://blog.csdn.net/daibaohui/article/details/113889229</a></p>
</blockquote>
<h3 id="木马的特点"><a href="#木马的特点" class="headerlink" title="木马的特点"></a>木马的特点</h3><p>木马全称为特洛伊木马，来源于古希腊神话。木马是通过<strong>欺骗或诱骗</strong>的方式安装，并在用户的计算机中<strong>隐藏</strong>以实现控制用户计算机的目的，具有<strong>远程控制、信息窃取、破坏</strong>等功能。</p>
<p>木马具有如下特点：</p>
<ul>
<li><p>欺骗性：木马都有很强的欺骗性，执行通常都由被攻击者自己执行起来的</p>
</li>
<li><p>隐藏性</p>
</li>
<li><p>非授权性：执行恶意操作是没有经过用户授权的</p>
</li>
<li><p>交互性：主机之外的攻击者可以通过某种方式对主机进行交互</p>
</li>
</ul>
<h3 id="木马的分类"><a href="#木马的分类" class="headerlink" title="木马的分类"></a>木马的分类</h3><p>不同视角有不同的分类</p>
<h4 id="行为视角"><a href="#行为视角" class="headerlink" title="行为视角"></a>行为视角</h4><p>粒度细，如卡巴斯基SafeStream病毒库的分类标准。由下图所示，它是卡巴斯基整个对恶意代码分类体系，最上面的是蠕虫（Worm）和病毒（Virus），接着是后门（Backdoor）和Trojan，接着将Trojan按行为分成了很多类，最后是Rootkit和Exploit。从下往上是按照危害程度进行排序，最上面的危害程度最大、最下面的危害程度最小。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/1_%E5%8D%A1%E5%B7%B4%E6%96%AF%E5%9F%BA%E5%88%86%E7%B1%BB.png" class="" title="卡巴斯基病毒分类">

<p>下面这张图是卡巴斯基木马的具体分类，木马分为Backdoor(后门)、Trojan（木马）、Rootkit（提权）、Exploit（漏洞利用）。 按道理说，将Exploit放到木马范畴是不合适的，接着Trojan又分为Trojan-Downloader（下载）、Trojan-Dropper（释放）、Trojan-Spy（间谍软件）Trojan-DDoS（拒绝服务）、Trojan-Ransom（磁盘数据加密勒索用户）等。同时，它在命名的时候会根据其行为进行分类。对于卡巴斯基来说，Backdoor包括远程控制型程序，就是这篇文章的远控型木马。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/2_%E5%8D%A1%E5%B7%B4%E6%96%AF%E5%9F%BA%E6%9C%A8%E9%A9%AC.png" class="" title="卡巴斯基木马分类">


<h4 id="功能视角"><a href="#功能视角" class="headerlink" title="功能视角"></a>功能视角</h4><p>包括远程控制型、信息获取型、破坏型等。</p>
<h5 id="远程控制型木马"><a href="#远程控制型木马" class="headerlink" title="远程控制型木马"></a>远程控制型木马</h5><p>远程控制可以对目标计算机进行交互性访问（实时或非实时），可以下发相应的指令触发恶意软件的功能，也能获取目标的各种数据。其交互性是双向的（攻击者-被控制端）。<br>典型案例包括卡巴斯基分类标准下的木马之类Backdoor，还有一些实际案例，包括冰河、网络神TOU、广外女神、网络公牛、黑洞、上兴、彩虹桥、PCShare、灰鸽子等。下图展示了灰鸽子代码。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/3_%E7%81%B0%E9%B8%BD%E5%AD%90.png" class="" title="灰鸽子">

<h5 id="信息获取型木马"><a href="#信息获取型木马" class="headerlink" title="信息获取型木马"></a>信息获取型木马</h5><p>信息型获取木马的功能是信息获取，可以从键盘输入、内存、文件、数据库、浏览器Cookies等中获取有价值的信息。其交互性是单向交互，是被控制端发送数据给攻击者，比如发送至攻击者的第三方空间、文件服务器、指定邮箱等，或者直接开启FTP服务程序，攻击者直接访问从而下载数据。</p>
<p>下图展示了BPK软件界面，包括屏幕截屏、信息记录等功能，并发送数据给攻击者。典型案例包括卡巴斯基分类标准下的Trojan-Bank、Trojan-GameThief、Trojan-IM、Trojan-Spy、Trojan-PSW、Trojan-Mailfinder等。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/4_BPK.png" class="" title="BPK">

<h5 id="破坏性木马"><a href="#破坏性木马" class="headerlink" title="破坏性木马"></a>破坏性木马</h5><p>它的功能是对本地或远程主机系统进行数据破坏、资源消耗等。其交互性也是单向的，攻击者可以向被控制端发送指令，有的情况也没有任何交互。<br>典型案例包括卡巴斯基分类标准下的Trojan-DDoS、Trojan-Ransom、Trojan-ArcBomb、Trojan-Downloader、Trojan-Dropper等。</p>
<h3 id="木马的植入方式"><a href="#木马的植入方式" class="headerlink" title="木马的植入方式"></a>木马的植入方式</h3><p>木马的欺骗性很强，那么它究竟是通过什么方式去欺骗用户安装这个程序呢？常见方式如下：</p>
<h4 id="网页挂马植入"><a href="#网页挂马植入" class="headerlink" title="网页挂马植入"></a>网页挂马植入</h4><p>通过网页挂马实现比较典型，通常需要利用浏览器或相关漏洞，再结合实时新闻、热点话题制作相关网页，将漏洞和网页结合，最后生成恶意网页，当用户打开网页时，远程的木马程序会自动下载和安装。常见的漏洞比如：MS06014、MS10003。</p>
<h4 id="电子邮件植入（鱼叉攻击）"><a href="#电子邮件植入（鱼叉攻击）" class="headerlink" title="电子邮件植入（鱼叉攻击）"></a>电子邮件植入（鱼叉攻击）</h4><p>电子邮件植入最常见的是通过附件的形式，当用户打开附件时被注入木马；另一种是电子邮件与恶意网页相结合，由于电子邮件是支持HTML正文的，如果将相关漏洞植入到网页中，也是能够达到相关的效果。即使不打开附件，选中就会被植入（以HTML格式发送，如求职者）</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/5_%E9%B1%BC%E5%8F%89%E6%94%BB%E5%87%BB.png" class="" title="鱼叉攻击">

<h4 id="文档捆绑植入（鱼叉攻击偏多）"><a href="#文档捆绑植入（鱼叉攻击偏多）" class="headerlink" title="文档捆绑植入（鱼叉攻击偏多）"></a>文档捆绑植入（鱼叉攻击偏多）</h4><p>这也是一种有效的方式，通过office文档、pdf文档漏洞等将文档进行捆绑，当用户打开文档时会触发漏洞，从而释放木马或执行shellcode执行远程攻击。这种文档同时也常用于邮件附件的形式发送。</p>
<h4 id="伪装欺骗植入"><a href="#伪装欺骗植入" class="headerlink" title="伪装欺骗植入"></a>伪装欺骗植入</h4><p>比如可以对exe的文件后缀名进行修改，在原本一个“exe”文件前增加“doc”，然后输入很多空格让其exe不显示出来，再修改成文档类图标，从而进行伪装；另一种是更改后缀名（Unicode翻转字符），将“cod”进行翻转，再就是图标伪装等。</p>
<h4 id="捆绑植入"><a href="#捆绑植入" class="headerlink" title="捆绑植入"></a>捆绑植入</h4><p>EXE捆绑、文档嵌入、多媒体文件、电子书植入。（CVE-2018-20250）WinRAR捆绑文件的方法。</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>比如特定U盘植入（故意丢弃、或者工作U盘、数据拷贝等）、社会工程等。</p>
<h3 id="木马的通信方式"><a href="#木马的通信方式" class="headerlink" title="木马的通信方式"></a>木马的通信方式</h3><p>木马的控制端和被控端要通信，首先要建立传输的通道，常见的传输通道构建需要通过IP地址、端口等信息、第三方网站地址实现。建立通信的方式包括两类：正向连接;   反向连接</p>
<h4 id="正向连接"><a href="#正向连接" class="headerlink" title="正向连接"></a>正向连接</h4><p>正向连接是指控制端主动去连接被控制端，需要被控制端开放相关端口来供控制端连接。首先，控制端会去连接被控端，然后发送相关的控制指令，被控端会将主机上的相关信息反馈给控制端，通常包括IP地址、MAC地址、计算机名称、内存大小等。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/6_%E6%AD%A3%E5%90%91%E8%BF%9E%E6%8E%A5.png" class="" title="正向连接">

<p>这种连接会存在一个问题，如果对方系统存在防火墙的话，通常会进行拦截。正向连接的优缺点如下：</p>
<p>优点:</p>
<ul>
<li>攻击者无需外部IP地址，只要能够上网，就能够去连接远程主机</li>
<li>木马样本不会泄露攻击者IP地址，木马不会主动去对外连接，不会泄露IP</li>
</ul>
<p>缺点:</p>
<ul>
<li>可能被防火墙阻挡</li>
<li>被攻击者必须具备外部IP地址</li>
<li>定位被攻击者相对困难，比如被攻击者IP是否变化？目标主机何时上线？当然有些木马，在目标主机主机能够上网时，会给指定邮箱发送IP地址信息，攻击者收到IP地址后会去主动连接主机。</li>
</ul>
<h4 id="反向连接"><a href="#反向连接" class="headerlink" title="反向连接"></a>反向连接</h4><p>第一种方式是右边的被控端（服务端）主动连接控制端主机，这种情况下防火墙一般会允许通过，尤其是目前很多木马程序采用80端口作为远程连接的端口，防火墙会非常信任。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/7_%E5%8F%8D%E5%90%91%E8%BF%9E%E6%8E%A5.png" class="" title="反向连接">

<p>第一种方式的优缺点如下：</p>
<p>优点：</p>
<ul>
<li>通过防火墙相对容易</li>
<li>可以控制局域网内的目标</li>
<li>攻击目标随时上线，攻击者可以进行随时控制，因为攻击者控制服务器一直在线，只要被控端上线就会连接过来，甚至可以通过短信等方式告知。</li>
</ul>
<p>缺点：</p>
<ul>
<li>样本会暴露控制服务器信息（域名或IP）</li>
<li>攻击者通常应当具有外部IP</li>
</ul>
<p>关于反向连接，还有另外一种方式，被控端和控制端之间有个第三方的肉机，它们都和第三方通信，比如肉机、Web服务器。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/8_%E5%8F%8D%E5%90%91%E8%BF%9E%E6%8E%A52.png" class="" title="反向连接2">

<p>优点：</p>
<ul>
<li>可绕过防火墙，自动连接上线，不易被发现（代理）</li>
</ul>
<p>缺点：</p>
<ul>
<li>肉鸡的稳定性需要保障</li>
</ul>
<h4 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h4><p>TCP协议：</p>
<ul>
<li>稳定、易被发现</li>
<li>HTTP协议伪装</li>
</ul>
<p>UDP协议：</p>
<ul>
<li>和TCP一样也有正向、反向两种方式</li>
<li>负载比TCP少，但是可靠性低</li>
</ul>
<p>ICMP＋TCP／UDP：</p>
<ul>
<li>该方式平时不开启端口，但会监听ICMP报文，以感知木马数据。当攻击者想对这台主机控制时，可以发送ICMP报文，发过来之后控制端监听到特定报文时，就知道到想要进行监听并开启相关端口。ICMP报文是由系统内核或进程直接处理而不是通过端口，其方式比较隐蔽，一般不会被防火墙过滤。</li>
</ul>
<p>下图展示了冰河写的后门程序，叫BITS（Background Intelligent Transfer Service），是一种难以觉察的后门，采用ICMP＋TCP／UDP方式实现。进程管理器首先看不到，另外平时没有端口，只是在系统中充当卧D的角色，并且提供正向连接和反向连接两种功能，适用于不同的操作系统（Windows2000&#x2F;XP&#x2F;2003），通过其提供的Shell，你能做很多事情。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/9_BITS.png" class="" title="BITS">



<h2 id="远控木马的常见功能及意图"><a href="#远控木马的常见功能及意图" class="headerlink" title="远控木马的常见功能及意图"></a>远控木马的常见功能及意图</h2><h3 id="木马结构"><a href="#木马结构" class="headerlink" title="木马结构"></a>木马结构</h3><p>首先看下木马的结构，一般由三部分组成，包括木马配置程序、控制端程序（客户端）和被控制端程序（服务端程序）。其中配置程序用于配置被控端的特征和功能，包括是否创建服务、是否隐藏等。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/10_%E6%9C%A8%E9%A9%AC%E7%BB%93%E6%9E%84.png" class="" title="木马结构">

<p>下图展示了PcShare的主控界面，其中“生成客户”点击后就是木马的配置过程。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/11_PCshare.png" class="" title="PCshare">

<p>下图展示了木马上线后的控制界面，包括目录浏览、屏幕控制、进程列表、窗口列表、服务管理、注册表编辑、键盘记录等。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/12_PCshare2.png" class="" title="PCshare">

<p>下面是灰鸽子的主界面。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/13_%E7%81%B0%E9%B8%BD%E5%AD%902.png" class="" title="灰鸽子">

<h3 id="木马功能"><a href="#木马功能" class="headerlink" title="木马功能"></a>木马功能</h3><p>木马的典型功能包括：</p>
<h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><p>文件管理主要目的是获取目标的文件系统信息，通常包括如下功能：</p>
<ul>
<li>浏览各磁盘文件</li>
<li>上传、下载文件（包括上传恶意文件）</li>
<li>执行文件</li>
<li>删除文件</li>
<li>修改文件信息（如文件属性、时间）</li>
</ul>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/14_%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86.png" class="" title="文件管理">

<blockquote>
<p>可能涉及的部分关键函数: GetLogicalDriveString、 GetDiskFreeSpace(Ex)、GetVolumeInformation、GetDriveType、 FindFirstFile、 FindNextFile、 FindClose、DeleteFile、SHFileOperation 、SHEmptyRecycledBin、 MoveFile、 CreateFile( Ex) 、WriteFile 等</p>
</blockquote>
<h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4><p>查看、结束、暂停目标系统进程。具体目的包括：</p>
<ul>
<li>查看目标系统的环境信息<ul>
<li>通过进程查看功能可以实现查看安装了哪些软件？目前对方正在做什么？</li>
</ul>
</li>
<li>停止或暂停目标系统的相关程序，从而形成干扰<ul>
<li>如反病毒程序</li>
</ul>
</li>
</ul>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/15_%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86.png" class="" title="进程管理">

<blockquote>
<p>涉 及 的 关 键 函 数 包 括：CreateToolhelp32SnapShot、 Process32First、Process32Next、 EnumProcesses、 GetCurrentProcess、 OpenProcessToken、LookupPrivilegeValue、 AdjustTokenPrivilege、 OpenProcess、 GetModuleBaseName、EnumProcessModules、 GetModuleFileNameEx、 TerminateProcess 等。</p>
</blockquote>
<h4 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h4><p>主要功能是查看并管理目标系统的服务，包括：</p>
<ul>
<li>创建服务</li>
<li>启动&#x2F;停止服务</li>
<li>删除服务</li>
</ul>
<blockquote>
<p>可能涉及的关键函数: OpenSCManager、EnumServiceStatus、OpenService、 QueryServiceConfig、 StartService、StopService、 DeleteService 等。</p>
</blockquote>
<p>下图是PcShare提供的服务管理示例。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/16_%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86.png" class="" title="服务管理">

<h4 id="注册表管理"><a href="#注册表管理" class="headerlink" title="注册表管理"></a>注册表管理</h4><p>注册表管理可以浏览注册表的信息及键值，也能创建、删除一些键值。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/17_%E6%B3%A8%E5%86%8C%E8%A1%A8%E7%AE%A1%E7%90%86.png" class="" title="注册表管理">

<blockquote>
<p>可能涉及的关键函数包括: RegQueryInfoKey、RegEnumKeyEx、 RegEnumValue、 RegCreateKeyEx、RegDeleteKey、 RegSetValueEx、 RegDeleteValue 等。</p>
</blockquote>
<h4 id="屏幕控制"><a href="#屏幕控制" class="headerlink" title="屏幕控制"></a>屏幕控制</h4><ul>
<li>利用 keybd_event 或者SendInput 模拟按键PrintScreen</li>
<li>利用 CreateDC 获取当前屏幕设备的句柄，然后获取屏幕图像</li>
</ul>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/18_%E5%B1%8F%E5%B9%95%E6%8E%A7%E5%88%B6.png" class="" title="屏幕控制">

<h4 id="键鼠操作"><a href="#键鼠操作" class="headerlink" title="键鼠操作"></a>键鼠操作</h4><p>下图是PcShare远程控制的键盘控制</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/19_%E9%94%AE%E9%BC%A0%E6%93%8D%E4%BD%9C.png" class="" title="键鼠操作">

<blockquote>
<p>主要涉及函数：<br>SetCursorPos、mouse_event、SendInput</p>
</blockquote>
<h4 id="屏幕截取"><a href="#屏幕截取" class="headerlink" title="屏幕截取"></a>屏幕截取</h4><p>对于有些木马来说，会认为屏幕控制功能流量消耗很大，不希望引起被控制着注意，有时候进行屏幕抓取即可。</p>
<ul>
<li>抓取屏幕（单张、多张连续）</li>
<li>了解目标主机的当前操作情况</li>
</ul>
<blockquote>
<p>常见函数包括：<br>CreateDC、CreateCompatibleBitmap、BitBlt</p>
</blockquote>
<h4 id="语音视频截获"><a href="#语音视频截获" class="headerlink" title="语音视频截获"></a>语音视频截获</h4><p>录音:</p>
<ul>
<li>窃取对方谈话信息</li>
<li>窃取对方对外语音通话（如QQ、SKYPE、MSN等），甚至即使是在断网的环境也可能会被录音，当连接网络后再传输对应的数据。</li>
</ul>
<p>摄像头:</p>
<ul>
<li>打开摄像头（了解对方现场环境）</li>
<li>摄像录制（敲诈）等。</li>
</ul>
<p>下图展示了语音视频截获的过程。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/20_%E8%AF%AD%E9%9F%B3%E8%A7%86%E9%A2%91%E8%8E%B7%E5%8F%96.png" class="" title="语音视频获取">

<h4 id="键盘记录"><a href="#键盘记录" class="headerlink" title="键盘记录"></a>键盘记录</h4><p>获取目标电脑中的键盘击键信息，包括：</p>
<ul>
<li>用户名、密码信息</li>
<li>QQ、邮箱、网银、网上证券、网络游戏、支付宝等</li>
<li>聊天信息</li>
<li>部分木马支持中文汉字记录</li>
</ul>
<hr>
<p>其他功能还有窗口管理，比如查看目标主机目前开启了哪些窗口，了解目标用户正在做什么；</p>
<p>再就是远程Shell，包括交互式或非交互式Shell（远程交互的Cmd.exe）、直接执行命令或第三方程序等。</p>
<p>部分木马功能如下图所示，其中很多功能所有木马都具有，比如文件管理、注册表管理、屏幕监控，也有一些功能是特有的。</p>
<img src="/%E7%BD%91%E7%BB%9C%E6%9C%A8%E9%A9%AC/21_%E6%9C%A8%E9%A9%AC%E5%8A%9F%E8%83%BD.png" class="" title="木马功能">


<p>编写木马的关键：</p>
<ul>
<li>功能适当［精简灵活］</li>
<li>适用性强［功能、权限］</li>
<li>高效、稳定、隐蔽［传输］</li>
<li>可穿透性</li>
<li>自更新、自销毁</li>
<li>反调试、反分析、防追踪、反制对抗</li>
<li>持续免杀性能等<ul>
<li>特征值、通用主机行为、异常的通信流量</li>
</ul>
</li>
</ul>
<p>既然远控木马也是恶意软件，那么怎么检测木马呢？下面简单提供了一些思路。</p>
<p>静态文件特征（木马程序是独立的文件，就存在静态文件特征）</p>
<p>网络流量特征（交互性木马检测流量）</p>
<p>系统行为特征（木马执行时创建线程、进程、驱动、网络等行为）</p>
<p>功能行为特征（录音、截屏、键盘、shell行为检测）</p>
<p>攻击意图（自动化检测功能是正常或恶意，当然难度也大）</p>
<p>…</p>
]]></content>
      <categories>
        <category>软件安全</category>
      </categories>
      <tags>
        <tag>木马</tag>
      </tags>
  </entry>
  <entry>
    <title>计网实验</title>
    <url>/%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<blockquote>
<p>此贴为WHU_网安院计网实验备忘（每次都忘记基本指令和参数之类的(&#x2F;(ㄒoㄒ)&#x2F;~~)），写一些基本命令，以及注意事项之类的，不涉及详细实验步骤（我也想写，但是实验报告太多惹🆘）</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>实验平台：<a href="http://10.201.133.200:8080/szy">http://10.201.133.200:8080/szy</a></p>
<p>账号密码：********（看不到吧，老师会给你自己的）</p>
</blockquote>
<hr>
<h2 id="实验内容（补充中）"><a href="#实验内容（补充中）" class="headerlink" title="实验内容（补充中）"></a>实验内容（补充中）</h2><ol>
<li>静态路由实验</li>
<li>动态路由实验<ol>
<li>RIP路由协议（包含dhcp协议、md5加密）</li>
<li>OSFP路由协议</li>
</ol>
</li>
</ol>
<hr>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>注意</strong>：</p>
<ul>
<li>需要连线！需要连线！路由配置好了不连线是行不通滴🤡</li>
<li>关以太网！关以太网！机架中当PC用的电脑要关掉以太网，不然你会ping不通的</li>
</ul>
<h3 id="1-静态路由实验"><a href="#1-静态路由实验" class="headerlink" title="1.静态路由实验"></a>1.静态路由实验</h3><p>先规划好各个接口的IP地址，给设备连线。端口别接错了，只有中间几个口能用（i dont’t know why），防止迷糊，放个图：</p>
<img src="/%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C/1.%E8%B7%AF%E7%94%B1%E5%99%A8.png" class="" title="图片">

<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命令有缺省，为了方便（好吧，是因为记不住）</span></span><br><span class="line"><span class="comment">// 先进控制台</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置设备要进config模式</span></span><br><span class="line">&gt;&gt; enable</span><br><span class="line">&gt;&gt; config</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改个名</span></span><br><span class="line">&gt;&gt; hostname 名字    <span class="comment">// RA、RB、RC之类的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看配置信息</span></span><br><span class="line">&gt;&gt; show ip route    <span class="comment">// 查看路由表，我个人用的最多</span></span><br><span class="line">&gt;&gt; show running     <span class="comment">// 查看当前配置</span></span><br><span class="line">&gt;&gt; show interface   <span class="comment">// 查看接口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由器各个端口的IP</span></span><br><span class="line"><span class="comment">// 组内协商好，不要用本地网段全0的，不要互相冲突</span></span><br><span class="line"><span class="comment">// 先进入端口</span></span><br><span class="line"><span class="comment">// 命令全称：interface gigabitEthernet 0/1（这么长，记个毛线）</span></span><br><span class="line">&gt;&gt; <span class="type">int</span> g0/<span class="number">0</span>     <span class="comment">// 表示0端口，g0/1表示1端口</span></span><br><span class="line">&gt;&gt; ip add IP地址 子网掩码</span><br><span class="line">&gt;&gt; no shutdown  <span class="comment">// 打开端口，我也不知道不写有没有影响</span></span><br><span class="line">&gt;&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置静态路由</span></span><br><span class="line"><span class="comment">// 目标网络不要填具体的主机Ip，哪怕该网络只有一台主机</span></span><br><span class="line"><span class="comment">// 下一跳地址为相连的下一个路由器的端口IP，不是本路由器的转发端口</span></span><br><span class="line">&gt;&gt; ip route 目标网络 子网掩码 下一跳地址</span><br><span class="line">&gt;&gt; ip route <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>     <span class="comment">// 默认地址设置，没用过</span></span><br><span class="line">&gt;&gt; no ip route ……   <span class="comment">// 配错路由的时候反悔用的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p>配好各个路由器之后，记得检查有无漏的错的</p>
<p><strong>！！！</strong> PC的IP要自己手配哦（应该都会吧？先不细说了，有空再）</p>
<p>都搞好后就可以开始在控制台和各个PC的CMD中尽情地ping了</p>
<blockquote>
<p>推荐另一个命令<code>tracert 目标IP</code>可以显示通信的路径，方便调试</p>
</blockquote>
<p><strong>补充</strong>：三层交换机配置方法<br>一直是我队友配的这个，所以非常不熟呃呃呃，仅供参考!</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不做配置，可以直接当二层交换机使用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="动态路由实验"><a href="#动态路由实验" class="headerlink" title="动态路由实验"></a>动态路由实验</h3><blockquote>
<p>记得进config再配路由器哦🌹</p>
</blockquote>
<h4 id="RIP路由协议"><a href="#RIP路由协议" class="headerlink" title="RIP路由协议"></a>RIP路由协议</h4><p>先连线</p>
<p>再配各个路由器的IP（跟上边一样）</p>
<p>然后配DHCP，给各个主机自动分配IP</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt; ip dhcp pool student  <span class="comment">// student应该可以随便改</span></span><br><span class="line">&gt; network <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> <span class="comment">// 只给相连的子网配</span></span><br><span class="line">&gt; <span class="keyword">default</span>-router <span class="number">192.168</span><span class="number">.1</span><span class="number">.254</span>   <span class="comment">// 默认网关</span></span><br><span class="line">&gt; service dhcp <span class="comment">// 开启dhcp服务</span></span><br></pre></td></tr></table></figure>
<p>配完记得在PC上查看下有没有成功</p>
<p>接着配RIP，让其动态学习路由</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt; route rip <span class="comment">// 开启rip协议</span></span><br><span class="line">&gt; version <span class="number">2</span> <span class="comment">// 声明版本，1和2差别挺大好像，学过的忘完了已经（去世）</span></span><br><span class="line">&gt; no <span class="keyword">auto</span>-summary <span class="comment">// 关闭自动汇总，所配即所得</span></span><br><span class="line">&gt; network <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>   <span class="comment">// 申明本设备的直连网段</span></span><br><span class="line">&gt; network <span class="number">192.169</span><span class="number">.1</span><span class="number">.0</span>   <span class="comment">// 直连的有几个写几个，不用写子网掩码</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<p>RIP验证，用md5来做，可是我们没弄这个，就不谈了，私密吗喽🙇</p>
<p>接下来查看各个路由器的路由表，应该多了几个’r’开头的路由，即为路由器自己学习到的路由，然后就直接开ping!!!</p>
<h4 id="OSFP路由协议"><a href="#OSFP路由协议" class="headerlink" title="OSFP路由协议"></a>OSFP路由协议</h4><p>照例，先连线，配主机IP（可以用DHCP配，不过主机少的话，手配更省事点），路由器的IP（什么时候这个也能自动化）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我也没太搞懂这个</span></span><br><span class="line">&gt; osfp <span class="number">1</span>    <span class="comment">// 应该是版本？</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">个人理解：area是提前规划好的，有单区域、多区域（配起来好像没啥区别），所有和路由器端口直连的网段的IP都写上，子网掩码格式变了（没试过别的行不行）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&gt; network <span class="number">192.168</span><span class="number">.2</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.255</span> area <span class="number">2</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>配好之后，路由器之间会开始泛洪，互相交换链路信息，可以查看路由表，其中’o’开头的即为学习到的路由，带有时间信息，可以查看彼此之间学习的先后顺序（没啥用），至此，应该就可以测试连通性了</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>备忘</tag>
      </tags>
  </entry>
</search>
